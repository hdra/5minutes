---
- name: First 5 minutes in new servers
  hosts: servers
  become: yes
  become_user: root
  vars_files:
    - vars.yml

  tasks:
    - name: Update APT packages cache
      apt: update_cache=yes

    - name: Perform aptitude safe-upgrade
      apt:
          upgrade: dist

    - name: Create new user
      user: name={{ server_user_name }} password={{ server_user_password }} shell=/bin/bash

    - name: Add user to sudoers
      lineinfile: dest=/etc/sudoers
                  regexp="{{ server_user_name }} ALL"
                  line="{{ server_user_name }} ALL=(ALL) ALL"
                  state=present

    - name: Add authorized_keys for the user
      authorized_key: user={{ server_user_name }} key="{{ lookup('file', item) }}"
      with_items:
        - "{{ user_public_keys }}"

    - name: Disallow root SSH access
      action: lineinfile dest=/etc/ssh/sshd_config regexp="^PermitRootLogin" line="PermitRootLogin no" state=present
      notify: Restart ssh

    - name: Disallow password authentication
      action: lineinfile dest=/etc/ssh/sshd_config regexp="^PasswordAuthentication" line="PasswordAuthentication no" state=present
      notify: Restart ssh

    - name: Install required packages
      apt: state=present pkg={{ item }}
      with_items:
      - "{{ required_packages }}"

    - name: Allow ssh and http(s) connections
      ufw: rule=allow port={{ item }}
      with_items:
        - "{{ ufw_allowed_ports }}"

    - name: Enable ufw/firewall
      ufw: state=enabled policy=deny

    - name: Set up Postfix to relay mail
      debconf: name=postfix
               question='{{ item.question }}'
               value='{{ item.value }}'
               vtype='{{ item.vtype }}'
      with_items:
        - { question: 'postfix/mailname', value: '{{ ansible_fqdn }}', vtype: 'string' }
        - { question: 'postfix/main_mailer_type', value: 'Internet Site', vtype: 'string' }

    - name: Email logwatch summary daily
      lineinfile: dest=/etc/cron.daily/00logwatch
                  regexp="^/usr/sbin/logwatch"
                  line="/usr/sbin/logwatch --output mail --mailto {{ logwatch_email }} --detail high"
                  state=present create=yes

    - name: Setup unattended upgrades interval
      lineinfile:
        dest: /etc/apt/apt.conf.d/10periodic
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - {
          regexp: '^APT::Periodic::Update-Package-Lists',
          line: 'APT::Periodic::Update-Package-Lists "1";'
        }
        - {
          regexp: '^APT::Periodic::Download-Upgradeable-Packages',
          line: 'APT::Periodic::Download-Upgradeable-Packages "1";'
        }
        - {
          regexp: '^APT::Periodic::AutocleanInterval',
          line: 'APT::Periodic::AutocleanInterval "7";'
        }
        - {
          regexp: '^APT::Periodic::Unattended-Upgrade',
          line: 'APT::Periodic::Unattended-Upgrade "1";'
        }
    - name: Setup unattended upgrades channel
      lineinfile:
        path: /etc/apt/apt.conf.d/50unattended-upgrades
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: "{{ item.state }}"
      with_items:
        - {
          regexp: '^\s*"\${distro_id}:\${distro_codename}";',
          line: '"${distro_id}:${distro_codename}";',
          state: present
        }
        - {
          regexp: '^\s*"\${distro_id}:\${distro_codename}-security";',
          line: '"${distro_id}:${distro_codename}-security";',
          state: present
        }
        - {
          regexp: '^\s*"\${distro_id}ESM:\${distro_codename}";',
          line: '"${distro_id}ESM:${distro_codename}";',
          state: present
        }
        - {
          regexp: '^\s*"\${distro_id}:\${distro_codename}-updates";',
          line: '"${distro_id}:${distro_codename}-updates";',
          state: absent
        }
        - {
          regexp: '^\s*"\${distro_id}:\${distro_codename}-proposed";',
          line: '"${distro_id}:${distro_codename}-proposed";',
          state: absent
        }
        - {
          regexp: '^\s*"\${distro_id}:\${distro_codename}-backports";',
          line: '"${distro_id}:${distro_codename}-backports";',
          state: absent
        }

  handlers:
    - name: Restart ssh
      service: name=ssh state=restarted
